#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include "zmk-helpers/helper.h"

#define default_layer 0
#define lower_layer 1
#define raise_layer 2
#define num_layer 3
#define fun_layer 4
#define fr_layer 5

#define L_SQ_BKT &kp RA(LBRC)
#define R_SQ_BKT &kp RA(RBRC)

#define L_CL_BKT &kp RA(SQT)
#define R_CL_BKT &kp RA(BSLH)

#define L_CHEV &kp BSLH
#define R_CHEV &kp LS(BSLH)

#define _PLUS &kp LS(EQUAL)
#define _PIPE &kp LS(GRAVE)
#define UNDSCR &kp LS(MINUS)
#define MULTPL &kp LS(N8)
#define _AT &kp RA(N2)
#define AMPRS &kp LS(N7)
#define TREMA &kp LS(RBRC)

// 0   1  2  3  4  5   6  7  8  9 10 11
// 12 13 14 15 16 17  18 19 20 21 22 23
// 24 25 26 27 28 29  30 31 32 33 34 35
// 35 36 37 38 39 40  41 42 43 44 45 46
//    47 48 49 50 51  52 53 54 55 56  

#define KEYS_L 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 35 36 37 38 39 40 
#define KEYS_R 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 41 42 43 44 45 46
#define THUMBS 47 48 49 50 51 52 53 54 55 56

/* left-hand HRMs */
ZMK_HOLD_TAP(hml,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

/* right-hand HRMs */
ZMK_HOLD_TAP(hmr,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)
/ {
    keymap {
        compatible = "zmk,keymap";
	

        default_layer {
            bindings = <
    &kp ESC   	     &kp N1	   &kp N2	  &kp N3         &kp N4         &kp N5		&kp N6      &kp N7        &kp N8          &kp N9        &kp N0        &kp N4
    &kp TAB	     &kp Q	   &kp W	  &kp F          &kp P          &kp B		&kp J       &kp L         &kp U           &kp Y         &kp SCLN      &none
    &kp LSHIFT	     &hml LCTRL A  &hml RALT R	  &hml LGUI S    &hml LSHFT T   &lt 5 G		&lt 5 M     &hmr LSHFT N  &hmr LGUI E     &hmr LALT I   &hmr LCTRL O  &kp SQT 
    &kp TAB	     &kp Z	   &kp X	  &kp C          &kp D          &kp V		&kp K       &kp H         &kp COMMA &kp DOT &kp FSLH &kp ESC
                   &kp LGUI    &kp LCTRL &kp LALT  &lt 1 SPACE &lt 4 RET                             &lt 3 DEL	&lt 2 RET   &kp BSPC &kp RALT &kp LGUI
            >;
        };

        lower_layer {
            bindings = <
    &none   &none &none		&none	      &none     &none		&none  &none     &none    &none   &none     &none
    &none   &none &none 	&kp UP        &none     &none 		&none  &none     &none    &none   &none     &none
    &none   &none &kp LEFT      &kp DOWN      &kp RIGHT &none 		&none  &kp LEFT  &kp DOWN &kp UP  &kp RIGHT &none 
    &none   &none &none         &none         &none     &none 		&none  &none     &none    &none   &none     &none  						
	    	 &none  &none  &none &none &none			&none  &none     &none    &none   &none 
            >;
        };
        
	raise_layer {
            bindings = <
    &none     &none    &none       &none      &none     &none	      &none           &none     &none     &none      &none    &none
    &kp GRAVE &kp EXCL &kp AT      &kp HASH   &kp DLLR  &kp PRCNT     &kp CARET       &kp AMPS  &kp STAR  &kp LPAR   &kp RPAR &kp EQUAL
    &none     _PIPE    L_CHEV      L_SQ_BKT   L_CL_BKT  &kp LPAR      &kp RPAR        R_CL_BKT  R_SQ_BKT  R_CHEV     &kp HOME &kp PG_UP  
    _AT       UNDSCR   &kp EQUAL   &kp MINUS  _PLUS     MULTPL 	      &kp PAUSE_BREAK &kp F12   &kp INS   &kp DEL    &kp END  &kp PG_DN
	    	 &none  &none  &none &none &none		&none      &none      &none     &none      &none 
            >;
        };

        num_layer {
            bindings = <
    &none     &none      &kp N1  &kp N2 &kp N3 &none	    &none      &none     &none     &none      &none    &none
    &none     &kp LS(N3) &kp N7  &kp N8 &kp N9 &kp PLUS	    &none      &none     &none     &none      &none    &none
    &none     &kp LS(N8) &kp N4  &kp N5 &kp N6 &kp MINUS    &none      &none     &none     &none      &none    &none
    &none     &kp LS(N5) &kp N1  &kp N2 &kp N3 &kp EQUAL    &none      &none     &kp COMMA &kp DOT    &none    &none					
	    	 &none  &none  &kp N0 &kp SPC &none		&kp DEL      &kp RET   &none     &none      &none 
            >;
        };
        
        fun_layer {
            bindings = <
    &none &none  &none &none &none  &none            &none &kp F10  &kp F11 &kp F12 &none &none
    &none &none  &none &none &none  &none            &none &kp F7   &kp F8  &kp F9  &none &none
    &none &none  &none &none &none  &none            &none &kp F4   &kp F5  &kp F6  &none &none
    &none &none  &none &none &none  &none            &none &kp F1   &kp F2  &kp F3  &none &none					
	  &none  &none  &none &none &none 		 &none &none  &none  &none  &none &none 
            >;
        };
        
        fr_layer {
            bindings = <
    &none &none    &none &none    &none  &none            &none &none &none &none &none    &none
    &none &none    &none &none    &none  &none            &none &none &none &none &none    &none
    &none &kp LBKT &none &none    &none  &none            &none &none &none TREMA &kp LBRC &none
    &none &none    &none &kp RBKT &none  &none            &none &none &none &none &none    &none					
	  &none    &none &none    &none &none 		     &none &none  &none  &none  &none &none 
            >;
        };
    };
};